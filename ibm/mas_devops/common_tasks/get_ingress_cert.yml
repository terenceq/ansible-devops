---
# 1. Lookup for router-certs-default secret
# -----------------------------------------------------------------------------
- name: set ocp ingress tls secret
  set_fact:
    ocp_ingress_tls_secret_name: "{{ lookup('env', 'OCP_INGRESS_TLS_SECRET_NAME') | default('router-certs-default', True) }}"
  when:
    ocp_ingress_tls_secret_name is not defined

- name: Lookup for router-certs-default secret
  no_log: true
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ ocp_ingress_tls_secret_name }}"
    namespace: openshift-ingress
  register: router_certs_default_secret

- name: "Record that we have found the router default cert secret"
  when:
    - router_certs_default_secret is defined
    - router_certs_default_secret.resources | length > 0
  set_fact:
    found_router_default_secret: true
    cluster_ingress_secret_name: "{{ ocp_ingress_tls_secret_name }}"
    cluster_ingress_tls_crt: "{{ router_certs_default_secret.resources[0].data['tls.crt'] | b64decode }}"


# 2. Lookup for secret named after cluster ingress
# -----------------------------------------------------------------------------
- name: Get cluster subdomain
  when: found_router_default_secret is not defined
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: cluster_subdomain

- name: Lookup for cluster ingress secret
  when:
    - found_router_default_secret is not defined
    - cluster_subdomain.resources is defined
    - cluster_subdomain.resources | length > 0
  no_log: true
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ cluster_subdomain.resources[0].spec.domain | regex_search('[^.]*')  }}"
    namespace: openshift-ingress
  register: cluster_ingress_secret

- name: "Record that we have found the cluster ingress cert secret"
  when:
    - found_router_default_secret is not defined
    - cluster_ingress_secret is defined
    - cluster_ingress_secret.resources | length > 0
  set_fact:
    found_cluster_ingress_secret: true
    cluster_ingress_secret_name: "{{ cluster_subdomain.resources[0].spec.domain | regex_search('[^.]*')  }}"
    cluster_ingress_tls_crt: "{{ cluster_ingress_secret.resources[0].data['tls.crt'] | b64decode }}"


# 3. Lookup for secret based on the cluster name
# -----------------------------------------------------------------------------
# ROSA uses this convention
- name: Get all TLS secrets
  when:
    - found_router_default_secret is not defined
    - found_cluster_ingress_secret is not defined
  k8s_info:
    api_version: v1
    kind: Secret
    namespace: openshift-ingress
    field_selectors:
      - type=kubernetes.io/tls
  register: cluster_primary_secrets

- name: "Find Cluster Primary Secret"
  when:
    - found_router_default_secret is not defined
    - found_cluster_ingress_secret is not defined
    - cluster_primary_secrets is defined
    - cluster_primary_secrets.resources is defined
    - cluster_primary_secrets.resources | length > 0
    - item.metadata.name.endswith("-primary-cert-bundle-secret")
  set_fact:
    found_cluster_primary_secret: true
    cluster_ingress_secret_name: "{{ item.metadata.name }}"
    cluster_ingress_tls_crt: "{{ item.data['tls.crt'] | b64decode }}"
  with_items:
    - "{{ cluster_primary_secrets.resources }}"
  loop_control:
    label: "{{ item.metadata.name }}"


# 4. Log which (if any) secret was found
# -----------------------------------------------------------------------------
# If at least one of the secrets exist, then all good.  If none of the
# secrets are found, then fail with a message

- name: "Debug cluster certificate secret search"
  debug:
    msg:
      - "Found Router Default Secret ........... {{ found_router_default_secret | default(False, True) }}"
      - "Found Cluster Ingress Secret .......... {{ found_cluster_ingress_secret | default(False, True) }}"
      - "Found Cluster Primary Secret .......... {{ found_cluster_primary_secret | default(False, True) }}"
      - "Cluster Ingress Cert Secret Name ...... {{ cluster_ingress_secret_name | default('missing', True) }}"
      - "Cluster Ingress Cert .................. {{ cluster_ingress_tls_crt | default('missing', True) }}"


# COS and UDS roles both require one of these secrets ... can we fix it so that
# they don't, not sure why they can't create their own certs and need to
# piggyback off the cluster cert tbh.
- name: Fail if one of the cluster required secrets does not exist
  assert:
    that:
      - cluster_ingress_secret_name is defined
      - cluster_ingress_tls_crt is defined
    fail_msg: "This cluster does not contain any of the secrets known to contain the TLS certificate for the cluster ingress."

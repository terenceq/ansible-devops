---
# Create olm-utils-cm config maps which contains the versions
# for all CPD related services and dependencies.
# This will be used by the CPD operators to automatically set the target versions
# to be installed/upgraded
# -----------------------------------------------------------------------------
- name: "Create olm-utils-cm config map for cpd release {{ cpd_product_version }}"
  kubernetes.core.k8s:
    apply: yes
    template: '{{ role_path }}/../cp4d/templates/config_maps/olm-utils-cm-{{ cpd_product_version }}.yml.j2'

- name: "Lookup olm-utils-cm config map to know which CPD service version to install/upgrade for release {{ cpd_product_version }}"
  kubernetes.core.k8s_info:
    api_version: v1
    name: "olm-utils-cm"
    kind: ConfigMap
    namespace: "{{ cpd_instance_namespace }}"
  register: cpd_cm_info

- set_fact:
    cpd_components_meta: "{{ cpd_cm_info.resources[0].data.release_components_meta | from_yaml }}"
    cpd_assembly_name: "{{ cpd_service_info[cpd_service_name].assembly_name }}"

- name: "Set {{ cpd_service_name }} versions for cr, csv and sub_channel"
  set_fact:
    cpd_service_cr_version: "{{ cpd_components_meta[cpd_assembly_name].cr_version }}"
    cpd_service_csv_version: "{{ cpd_components_meta[cpd_assembly_name].csv_version }}"
    cpd_service_channel: "{{ cpd_components_meta[cpd_assembly_name].sub_channel | default(cpd_service_info[cpd_service_name].sub_channel, true) }}" # search sub_channel in olm-utils-cm, if does not exist then use the default

# 1. Load default storage classes and debug
# -----------------------------------------------------------------------------
- name: "Determine storage classes"
  include_tasks: "determine-storage-classes.yml"

- name: "Debug information"
  debug:
    msg:
      - "CPD Operator Namespace ................. {{ cpd_operators_namespace }}"
      - "CPD Instance Namespace ................. {{ cpd_instance_namespace }}"
      - "CPD Service name ....................... {{ cpd_service_name }}"
      - "CPD Service storage class .............. {{ cpd_service_storage_class }}"
      - "CPD Service version .................... {{ cpd_service_cr_version }}"
      - "CPD Service subscription channel ....... {{ cpd_service_channel }}"
      - "CPD Service csv ........................ {{ cpd_service_csv_version }}"

# 2. Determine CP4D admin login credentials
# -----------------------------------------------------------------------------
- name: "Lookup admin credentials if they haven't been provided already"
  when:
    - cpd_admin_username is not defined or cpd_admin_username == ""
    - cpd_admin_password is not defined or cpd_admin_password == ""
  include_tasks: "lookup-admin-credentials.yml"

# 3. Run Pre-req task
# -----------------------------------------------------------------------------
# Only Watson Discovery has special pre-reqs currently
- name: Run Install Prereqs
  when:
    - cpd_service_name is in ['wd', 'wsl', 'wml']
  include_tasks: "prereqs/prereqs-{{ cpd_service_name }}.yml"

# 3.1 Install Operand Configs and Operand Registries
# -----------------------------------------------------------------------------
# If it's CPD 4.5, only Watson Studio and Watson Discovery requires these operand configs to be applied via this automation.
# If it's CPD 4.0.x, no need to apply operand configs at all, as these will be automatically be set while installing services requiring it.
- name: Install Operand Configs and Operand Registries
  vars:
    cpd_wd_components: "{{ cpd_service_info.wd }}"
    cpd_olm_utils_components: "{{ cpd_components_meta }}"
  kubernetes.core.k8s:
    apply: yes
    template: "templates/operand_config/{{ cpd_service_name }}.yml"
  when:
    - cpd_service_name is in ['wd', 'wsl']
    - cpd_minor_version == '4.5'

# 4. Install CP4D Service Subscriptions
# -----------------------------------------------------------------------------
- name: "Install CP4D Service Subscription"
  vars:
    cpd_service_subscription_name: "cpd-{{ cpd_service_name }}-operator"
    cpd_service_package_name: "{{ cpd_service_info[cpd_service_name].package_name }}"
    cpd_service_channel_name: "{{ cpd_service_channel }}"
    cpd_service_catalog_source: "{{ cpd_service_info[cpd_service_name].catalog_source }}"
  kubernetes.core.k8s:
    apply: yes
    template: "templates/subscription.yml.j2"

# 5. Wait until the Service CRD is available
# -----------------------------------------------------------------------------
- name: "Wait until the {{ cpd_service_info[cpd_service_name].crd_name }} CRD is available"
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1
    name: "{{ cpd_service_info[cpd_service_name].crd_name }}"
    kind: CustomResourceDefinition
    wait: yes
    wait_sleep: 10
    wait_timeout: 300 # 5 mins until we give up waiting for the CRD to get into the expected state
    wait_condition:
      type: NamesAccepted
      status: "True"
  register: service_crd_info
  retries: 120 # ~approx 5 minutes before we give up waiting for the CRD to be created
  delay: 5 # seconds
  until:
    - service_crd_info.resources is defined
    - service_crd_info.resources | length > 0

# 6. Install CP4D Service CRs
# -----------------------------------------------------------------------------
- name: "Install Service CR"
  vars:
    cpd_olm_utils_components: "{{ cpd_components_meta }}"
  kubernetes.core.k8s:
    apply: yes
    template: "templates/services/{{ cpd_service_name }}.yml.j2"

# This is just a validation step to prevent the "wait tasks" to run before it gives enough time for the new cpd service operator version
# to start reconciling in case of an upgrade, otherwise it might not have given enough time for it to process the new version to be upgrade
# while its status' cr might still show 'completed'.
# With this, we ensure the new cpd service csv version operator is up and running with the new cr version before we check the cpd cr status
- name: "Wait CPD services subscription installedCSV version at {{ expected_installed_csv }}"
  vars:
    expected_installed_csv: "{{ cpd_service_info[cpd_service_name].csv_name }}.v{{ cpd_service_csv_version }}"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    namespace: "{{ cpd_operators_namespace }}"
    name: "cpd-{{ cpd_service_name }}-operator"
  register: cpd_sub_info
  retries: 20
  delay: 60 # Retry for approx 20 minutes (60s * 20 attempts) before giving up
  until:
    - cpd_sub_info.resources is defined
    - cpd_sub_info.resources | length > 0
    - cpd_sub_info.resources[0].status is defined
    - cpd_sub_info.resources[0].status.installedCSV is defined
    - cpd_sub_info.resources[0].status.installedCSV == expected_installed_csv

# some service operators like wd takes quite some time to start reconciling the upgrade and set cr status to in progress
# so adding a wait to let operator have enough time to set the proper cr status, this entire install/upgrade process will take much more than 5 minutes anyway...
- name: "Pause for 5 minutes before checking cpd service {{ cpd_service_name }} cr status..."
  pause:
    minutes: 5

# 7. Wait for CP4D Service to be ready
# -----------------------------------------------------------------------------
- name: "Wait for the service to be ready"
  include_tasks: "wait/wait-{{ cpd_service_name }}.yml"


# 8. Provide CP4D dashboard URL
# -----------------------------------------------------------------------------
- name: "Obtain CP4D dashboard URL"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Route
    label_selectors: component=ibm-nginx
  register: cpd_route_lookup
  until:
    - cpd_route_lookup.resources is defined
    - cpd_route_lookup.resources | length > 0
  retries: 10 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

- name: "Set CP4D URL"
  set_fact:
    cpd_url: https://{{ cpd_route_lookup.resources[0].spec.host }}

- name: "CP4D Installation Summary:"
  debug:
    msg:
      - "CP4D Dashboard ................. {{ cpd_url }}"
      - "CP4D Username .................. admin"
      - "CP4D Password .................. Found in 'admin-user-details' secret under '{{ cpd_instance_namespace }}' namespace"
      - "CP4D Service Installed ......... {{ cpd_service_name }}"


# 9. Generate MAS Config
# -----------------------------------------------------------------------------
# Only Watson Studio and Watson Discovery generate a configuration in config
# folder for later usage
- name: Generate MAS Config into {{ mas_config_dir }} folder
  when:
    - mas_instance_id is defined and mas_instance_id != ""
    - mas_config_dir is defined and mas_config_dir != ""
    - cpd_service_name is in ['wsl','wd']
  include_tasks: "gencfg/gencfg-{{ cpd_service_name }}.yml"

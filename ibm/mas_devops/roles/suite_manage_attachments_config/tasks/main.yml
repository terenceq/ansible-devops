---
# mas_instance_id is required in order to be able to lookup for manage application resources
- name: "Fail if mas_instance_id is not provided"
  assert:
    that: mas_instance_id is defined and mas_instance_id != ""
    fail_msg: "mas_instance_id property is required"

# mas_workspace_id is required in order to be able to lookup for manage application resources
- name: "Fail if mas_workspace_id is not provided"
  assert:
    that: mas_workspace_id is defined and mas_workspace_id != ""
    fail_msg: "mas_workspace_id property is required"

# db2_instance_name is required in order to be able to lookup for manage application database
- name: "Fail if db2_instance_name is not provided"
  assert:
    that: db2_instance_name is defined and db2_instance_name != ""
    fail_msg: "db2_instance_name property is required"

# mas_manage_attachments_provider is required
- name: "Fail if mas_manage_attachments_provider is not provided"
  assert:
    that:
      - mas_manage_attachments_provider is defined and mas_manage_attachments_provider in ['cos', 'filestorage']
    fail_msg: "mas_manage_attachments_provider property is required and must be set to one of the supported storage providers: ['cos', 'filestorage']"

- name: "Running {{ mas_manage_attachments_provider }} attachments configuration for Manage application"
  include_tasks: "tasks/providers/cos.yml"
  when: mas_manage_attachments_provider == 'cos'

# 6. Update Manage database with COS information
# ---------------------------------------------------------------------------------------------------------------------
- name: Lookup Manage Route
  kubernetes.core.k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: "{{ mas_instance_id}}-manage-{{ mas_workspace_id }}"
    namespace: "mas-{{ mas_instance_id }}-manage"
  register: manage_route

- name: Assert Manage Route is valid
  assert:
    that: "{{ manage_route.resources | length > 0 }}"
    fail_msg: "Failed! Manage Route {{ mas_instance_id}}-manage-{{ mas_workspace_id }} not found..."

- name: Set Manage Route variable
  set_fact:
    manage_url: "{{ manage_route.resources[0].spec.host }}"

- debug:
    msg: "{{ manage_url }}"

- name: "Lookup Manage app DB2 instance {{ db2_instance_name }} in {{ db2_namespace }} namespace"
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ db2_namespace }}"
    label_selectors:
      - type=engine
      - app={{ db2_instance_name }}
  register: db2_pod
  failed_when:
    - db2_pod.resources is not defined
    - db2_pod.resources | length = 0

- name: Assert DB2 instance is valid
  assert:
    that: "{{ db2_pod.resources | length > 0 }}"
    fail_msg: "Failed! DB2 instance name {{ db2_instance_name }} not found in {{ db2_namespace }} namespace..."

- name: Set Manage app DB2 pod name variable
  set_fact:
    db2_pod_name: "{{ db2_pod.resources[0].metadata.name if (db2_pod.resources is defined) else 'Undefined' }}"

- name: Create SQL script to update Manage DB2 with COS information
  ansible.builtin.template:
    src: '{{ mas_manage_attachments_provider }}.sh.j2'
    dest: '/tmp/{{ mas_manage_attachments_provider }}_attachment_config.sh'
    mode: '777'

- name: Copy the SQL script into the Manage app DB2 pod {{ db2_pod_name }}
  shell: "oc cp /tmp/{{ mas_manage_attachments_provider }}_attachment_config.sh {{ db2_namespace }}/{{ db2_pod_name }}:/tmp/{{ mas_manage_attachments_provider }}_attachment_config.sh"

- name: Run SQL script on Manage app DB2 pod {{ db2_pod_name }} as db2inst username... (this can take several minutes)
  shell: oc exec -n {{ db2_namespace }} {{ db2_pod_name }} -- su -lc '/tmp/{{ mas_manage_attachments_provider }}_attachment_config.sh | tee /tmp/{{ mas_manage_attachments_provider }}_attachment_config.log' db2inst1
  register: setup_attachment_output
  failed_when: setup_attachment_output.rc != 0

- debug:
    msg: "{{ setup_attachment_output.stdout_lines }}"

# 7. Restart Manage bundle pods to pick up the storage provider configuration
# ---------------------------------------------------------------------------------------------------------------------
- name: "Lookup Manage bundle pods"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    label_selectors: mas.ibm.com/appType=serverBundle
    namespace: "mas-{{ mas_instance_id }}-manage"
  register: manage_bundle_output

- name: "List Manage bundle pods"
  vars:
    list: []
  set_fact:
    list: "{{ list + [item.metadata.name] }}"
  with_items: "{{ manage_bundle_output.resources }}"
  no_log: true

- debug:
    msg: "Restarting the following Manage bundle pods: {{ list }}"

- name: "Restart Manage bundle pods to apply the attachments configuration"
  failed_when:
    - manage_bundle_output.resources | length == 0
  kubernetes.core.k8s:
    state: absent
    api_version: v1
    kind: Pod
    name: "{{ item.metadata.name }}"
    label_selectors: mas.ibm.com/appType=serverBundle
    namespace: "mas-{{ mas_instance_id }}-manage"
  with_items: "{{ manage_bundle_output.resources  }}"
  loop_control:
    label: "Restarting bundle pod: {{ item.metadata.name }}..."

- name: "Pause for 1 minute before checking bundle pods..."
  pause:
    seconds: 60

- name: "Wait Manage bundle pods to be ready"
  include_tasks: tasks/wait_bundle_pods.yml

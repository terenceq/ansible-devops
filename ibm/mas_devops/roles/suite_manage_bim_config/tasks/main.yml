---
# mas_instance_id is required in order to be able to lookup for manage application resources
- name: "Fail if mas_instance_id is not provided"
  assert:
    that: mas_instance_id is defined and mas_instance_id != ""
    fail_msg: "mas_instance_id property is required"

# db2_instance_name is required in order to be able to lookup for manage application database
- name: "Fail if db2_instance_name is not provided"
  assert:
    that: db2_instance_name is defined and db2_instance_name != ""
    fail_msg: "db2_instance_name property is required"

- name: "Fail if mas_app_settings_bim_mount_path is not provided"
  assert:
    that: mas_app_settings_bim_mount_path is defined and mas_app_settings_bim_mount_path != ""
    fail_msg: "mas_app_settings_bim_mount_path property is required"

# 1. Create BIM folders in maxinst pod PVC mounted path
# ---------------------------------------------------------------------------------------------------------------------
# BIM needs three folders to be configured in the PVC mounted path:
# /{{ mas_app_settings_bim_mount_path }}/import
# /{{ mas_app_settings_bim_mount_path }}/docs
# /{{ mas_app_settings_bim_mount_path }}/models

- set_fact:
    manage_namespace: mas-{{ mas_instance_id }}-manage

- name: "Lookup Manage app DB2 instance {{ db2_instance_name }} in {{ db2_namespace }} namespace"
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ manage_namespace }}"
    label_selectors:
      - mas.ibm.com/appType=maxinstudb
  register: maxinst_pod
  failed_when:
    - maxinst_pod.resources is not defined
    - maxinst_pod.resources | length = 0

- name: Set maxinst pod name
  set_fact:
    maxinst_pod_name: "{{ maxinst_pod.resources[0].metadata.name }}"

- debug:
    msg: "{{ maxinst_pod_name }}"

- name: Create BIM folders in the PVC mounted path in maxinst pod (docs, import and models)
  shell: oc exec -n {{ manage_namespace }} {{ maxinst_pod_name }} -- bash -c "mkdir -p {{ mas_app_settings_bim_mount_path}}/{docs,import,models}"
  register: setup_bim_folders_output
  failed_when: setup_bim_folders_output.rc != 0

# 2. Update Manage database with BIM information
# ---------------------------------------------------------------------------------------------------------------------
- name: "Lookup Manage app DB2 instance {{ db2_instance_name }} in {{ db2_namespace }} namespace"
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ db2_namespace }}"
    label_selectors:
      - type=engine
      - app={{ db2_instance_name }}
  register: db2_pod
  failed_when:
    - db2_pod.resources is not defined
    - db2_pod.resources | length = 0

- name: Set Manage app DB2 pod name variable
  set_fact:
    db2_pod_name: "{{ db2_pod.resources[0].metadata.name if (db2_pod.resources is defined) else 'Undefined' }}"

- name: Create SQL script to update Manage DB2 with BIM information
  ansible.builtin.template:
    src: 'updatebimconfig.sh.j2'
    dest: '/tmp/updatebimconfig.sh'
    mode: '777'

- name: Copy the SQL script into the Manage app DB2 pod {{ db2_pod_name }}
  shell: "oc cp /tmp/updatebimconfig.sh {{ db2_namespace }}/{{ db2_pod_name }}:/tmp/updatebimconfig.sh"

- name: Run SQL script on Manage app DB2 pod {{ db2_pod_name }} as db2inst username...
  shell: oc exec -n {{ db2_namespace }} {{ db2_pod_name }} -- su -lc '/tmp/updatebimconfig.sh | tee /tmp/updatebimconfig.log' db2inst1
  register: setup_attachment_output
  failed_when: setup_attachment_output.rc != 0

- debug:
    msg: "{{ setup_attachment_output.stdout_lines }}"

- name: "Manage BIM configuration debug"
  debug:
    msg:
      - "Manage BIM mounted path ................. {{ mas_app_settings_bim_mount_path }}"
      - "Manage BIM 'docs' folder ................ bim.import.docdir: {{ mas_app_settings_bim_mount_path }}/docs"
      - "Manage BIM 'import' folder .............. bim.import.dir: {{ mas_app_settings_bim_mount_path }}/import"
      - "Manage BIM 'models' folder .............. bim.model.dir: {{ mas_app_settings_bim_mount_path }}/models"
